# -*- coding: utf-8 -*-
"""terrin_plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-IMB9vE1RbvkMN9eOyBzFyR9xWvmHbYx
"""

import matplotlib.pyplot as plt

def y_plot(y,
           plot_title = "X-Y plot",
           fig_type="o-",
           fig_length=9,
           fig_height=6,
           xlabel="x axis[unit]",
           ylabel="y axis[unit]"):
    fig = plt.figure(figsize=(fig_length, fig_height))
    plt.plot(range(len(y)),y,fig_type)
    plt.title(plot_title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    
def x_y_plot_info():
    print("""
          - to have one plot
            fig,ax = plt.subplots()
            terrin_plots.x_y_plot(fig,ax,x,y)

          - to have subplots in one row/column
            fig,ax = plt.subplots(nrows=2,ncols=1)
            terrin_plots.x_y_plot(fig,ax[0],x1,y1)
            terrin_plots.x_y_plot(fig,ax[1],x2,y2)

          - to have subplots in multiple rows/columns
            fig,ax = plt.subplots(nrows=2,ncols=2)
            terrin_plots.x_y_plot(fig,ax[0][0],x00,y00)
            terrin_plots.x_y_plot(fig,ax[1][0],x10,y10)
            terrin_plots.x_y_plot(fig,ax[0][1],x01,y01)
            terrin_plots.x_y_plot(fig,ax[1][1],x11,y11)

          - to share the x-axis
            fig,(ax1,ax2) = plt.subplots(nrows=2,ncols=1,sharex=True)
            terrin_plots.x_y_plot(fig,ax[0],x1,y1)
            terrin_plots.x_y_plot(fig,ax[1],x2,y2)
          """)

def simple_x_y_plot(x,y,
                    plot_title = "X-Y plot",
                    fig_type="o-",
                    fig_length=9,
                    fig_height=6,
                    xlabel="x axis[unit]",
                    ylabel="y axis[unit]"):
    fig = plt.figure(figsize=(fig_length, fig_height))
    plt.plot(x,y,fig_type)
    plt.title(plot_title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)

def x_y_subplot(fig,ax,x,y,
                plot_title = "X-Y plot",
                fig_type="o-",
                fig_length=9,
                fig_height=6,
                xlabel="x axis[unit]",
                ylabel="y axis[unit]"):
    fig.set_figwidth(fig_length)
    fig.set_figheight(fig_height)
    ax.plot(x,y,fig_type)
    ax.set_title(plot_title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)

def plot_gaf(gaf_series,
             plot_title = "Gramian Angular Field",
             fig_length=9,
             fig_height=6):
    fig = plt.figure(figsize=(fig_length, fig_height))
    plt.matshow(gaf_series)
    plt.title(plot_title)

def horizontal_bar_chart(name, value, title="hbar", x_label="", y_label="",
                         length=16,height=9,ticks=False,splines=False,
                         x_pad=5,y_pad=5,grid=True,annotation=True,watermark=""):
  
    fig, ax = plt.subplots(figsize=(length, height))
    ax.barh(name,value)
    ax.set_title(title,loc ='center')
    ax.set_xlabel(x_label)
    ax.set_ylabel(y_label)

    if splines==False:
      for s in ['top', 'bottom', 'left', 'right']:
        ax.spines[s].set_visible(False)

    if ticks==False:
      ax.xaxis.set_ticks_position('none')
      ax.yaxis.set_ticks_position('none')

    ax.xaxis.set_tick_params(pad = x_pad)
    ax.yaxis.set_tick_params(pad = y_pad)

    if grid == True:
      ax.grid(b = True, color ='grey',linestyle ='-.', linewidth = 0.5,alpha = 0.2)

    # Show top values
    ax.invert_yaxis()

    if annotation ==True:
      for i in ax.patches:
        plt.text(i.get_width()+0.2, i.get_y()+0.5,
                  str(round((i.get_width()), 2)),
                  fontsize = 10, fontweight ='bold',
                  color ='grey')

    fig.text(0.9, 0.15, watermark, fontsize = 12,color ='grey', ha ='right', va ='bottom',alpha = 0.7)
    plt.show()